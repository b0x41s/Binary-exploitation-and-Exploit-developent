import subprocess
import sys

def checksec(file):
    result = subprocess.run(['checksec', '--file=' + file], capture_output=True, text=True)
    if result.returncode != 0:
        print("Error running checksec:", result.stderr)
        sys.exit(1)
    return result.stdout + result.stderr

def suggest_exploitations(checksec_output):
    suggestions = []

    if "NX enabled" in checksec_output:
        suggestions.append("Return-to-libc or ROP")
    else:
        suggestions.append("Shellcode injection")

    if "Canary found" in checksec_output:
        suggestions.append("ROP chains to bypass stack canary")
    else:
        suggestions.append("Buffer overflow without stack canary")

    if "Partial RELRO" in checksec_output:
        suggestions.append("GOT overwrite possible")
    elif "Full RELRO" not in checksec_output:
        suggestions.append("GOT overwrite possible")

    return suggestions

def main():
    if len(sys.argv) != 2:
        print("Usage: python suggest_exploit.py <binary>")
        sys.exit(1)

    binary = sys.argv[1]
    output = checksec(binary)
    print("Checksec Output:\n", output)
    suggestions = suggest_exploitations(output)
    print("\nSuggested Exploitation Methods:")
    for suggestion in suggestions:
        print("- " + suggestion)

if __name__ == "__main__":
    main()
